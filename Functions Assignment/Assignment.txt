Q1. Create an arrow function called square that takes a number as an argument and returns its square. Use
the arrow function to calculate the square of a given number and display the result.

Ans. const square = (number) => number * number;

example :  let givenNumber = 10;
           let result = square(10);
           console.log(result);

           // 100 - Ans 


Q2. Create a JavaScript function called generateGreeting that takes a name as an argument and returns a
personalized greeting message. Use this function to greet three different people.

Ans.    function generateGreeting(name){
        console.log(`Hello ${name}`);
        }

        const name1 = "Pushkar";
        const name2 = "mayank";
        const name3 = "jethalal";

        generateGreeting(name1);
        generateGreeting(name2);
        generateGreeting(name3);


Q3. Create an IIFE (Immediately Invoked Function Expression) that calculates the square of a number and
immediately displays the result.

Ans.    (function square(){
        let number = 25;
        console.log(`The square is ${number * number}`);
        })();

Q4. Write a JavaScript function called calculateTax that takes an income as an argument and returns the
amount of tax to be paid. Use a closure to handle different tax rates based on income ranges. Test the
function with various incomes.

 Ans.       function calculateTax(income){
            if(income < 250000){
                return "NIL";
            }
            else if(income > 250000 && income < 500000){
                return 0.05*income;
            }
            else if(income > 500000 && income < 1000000){
                return 0.20*income;
            }
            else if(income > 1000000){
                return 0.30*income;
            }
        }

        console.log(calculateTax(600000));


Q5. Write a JavaScript function called factorial that calculates the factorial of a non-negative integer using
recursion. Test the function with different inputs.

Ans. function factorial(number){
    if (number === 0 || number===1){
        return 1;
    }
    else{
        return number * factorial(number-1);
    }
}

console.log(factorial(6));

Q6. Write a JavaScript function called curry that takes a function as an argument and returns a curried
version of that function. The curried function should accept arguments one at a time and return a new
function until all arguments are provided. Then, it should execute the original function with all arguments.
Test the curry function with a function that adds two numbers.


Ans.  function curry(func) {
    return function curried(...args) { // args accumulates the arguments
        if (args.length >= func.length) {
            return func(...args); // If enough arguments, call the original function
        } else {
            return (...nextArgs) => curried(...args, ...nextArgs); // Otherwise, return a new function expecting more arguments
        }
    };
}
